# -*- coding: utf-8 -*-
"""MLSolkhan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W3w1FYywFlxFakd5x7P22hjyN5Z2KZDI
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from flask import Flask, request, jsonify
import pickle

# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00601/ai4i2020.csv"
data = pd.read_csv(url)

# Display first few rows of the dataset
print(data.head())

# Drop unnecessary columns
data.drop(columns=['UDI', 'Product ID'], inplace=True)

# Features and target
X = data.drop(columns=['Machine failure'])
y = data['Machine failure']

# One-hot encoding for categorical variables
X = pd.get_dummies(X, columns=['Type'])

# Correlation matrix
corr = X.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm')
plt.show()

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Save the model to disk
filename = 'finalized_model.sav'
pickle.dump(model, open(filename, 'wb'))

# Load the model from disk
model = pickle.load(open(filename, 'rb'))

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json(force=True)
    # Preprocess the data as required
    df = pd.DataFrame(data, index=[0])
    df = pd.get_dummies(df, columns=['Type'])
    # Ensure all columns are present
    for col in X.columns:
        if col not in df.columns:
            df[col] = 0
    prediction = model.predict(df)
    return jsonify({'prediction': int(prediction[0])})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)